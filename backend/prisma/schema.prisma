generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  username String @unique
  password String
  sessions Session[]
  
  sentRequests FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  channelMembers ChannelMember[]
  messages Message[]
}

model FriendRequest {
  id String @id
  senderId String
  receiverId String
  status FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  acceptedAt DateTime?

  sender User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Session {
  id String @id
  userId String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Channel {
  id String @id
  name String?
  serverId String?
  createdAt DateTime @default(now())

  members ChannelMember[]
  messages Message[]
}

model ChannelMember {
  id String @id
  channelId String
  userId String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}

model Message {
  id String @id
  channelId String
  senderId String
  content String
  createdAt DateTime @default(now())

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
